import <libkaorisd.gsl>

<init>
    lk_init
    float @lk_activity = 0.0

<lk_combo> : boolean
    lk_combo = false
    (@lk_side = @LK_RIGHT)? (@comboPhaseLeft > 0)?  lk_combo = true
    (@lk_side = @LK_LEFT)?  (@comboPhaseRight > 0)? lk_combo = true
<lk_combo_opposite> : boolean
    lk_combo_opposite = false
    (@lk_side = @LK_LEFT)?  (@comboPhaseLeft > 0)?  lk_combo_opposite = true
    (@lk_side = @LK_RIGHT)? (@comboPhaseRight > 0)? lk_combo_opposite = true
<lk_detect_activity>
    (@comboPhaseRight > 0)? @lk_activity += 0.1
    (@comboPhaseLeft  > 0)? @lk_activity += 0.1
    @lk_activity *= 0.9999

<sprite_list>
    lk_sprite_list

<update>
    float r = [random] * 0.99
    lk_detect_activity

    (@lk_state = @LK_GONE)?                   (@fcycle > @lk_startcycle + @LK_GONE_DURATION)? {
        # r = 0.0
        (r <  0.8)? lk_switch: state = @LK_RUNNING_SIDE_TO_MIDDLE
        (r >= 0.8)? lk_switch: state = @LK_RUNNING_SIDE_TO_SIDE
    }

    (@lk_state = @LK_GONE)?                   (@lk_activity > 90.0)? {
        lk_switch: state = @LK_RUNNING_SIDE_TO_MIDDLE
        @lk_activity = 0.0
    }

    (@lk_state = @LK_RUNNING_SIDE_TO_SIDE)?   (@fcycle > @lk_startcycle + @LK_RUNNING_DURATION)? {
        lk_switch: state = @LK_GONE
    }

    (@lk_state = @LK_RUNNING_SIDE_TO_MIDDLE)? (@fcycle > @lk_startcycle + @LK_RUNNING_DURATION / 2.0)? {
        lk_switch: state = @LK_WAITING
    }

    (@lk_state = @LK_RUNNING_MIDDLE_TO_MIDDLE)? (@fcycle > @lk_startcycle + @LK_RUNNING_DURATION / 9.0)? {
        lk_switch: state = @LK_WAITING
    }

    (@lk_state = @LK_RUNNING_MIDDLE_TO_SIDE)? (@fcycle > @lk_startcycle + @LK_RUNNING_DURATION / 2.0)? {
        lk_switch: state = @LK_GONE
    }

    (@lk_state = @LK_MOCKING)?                (@fcycle > @lk_startcycle + @LK_MOCKING_DURATION)? {
        (r < 0.4)? lk_switch: state = @LK_RUNNING_MIDDLE_TO_SIDE
        (r >= 0.4)? lk_switch: state = @LK_RUNNING_MIDDLE_TO_MIDDLE
    }

    (@lk_state = @LK_HAPPY)?                  (@fcycle > @lk_startcycle + @LK_HAPPY_DURATION)? {
        (r < 0.5)? lk_switch: state = @LK_RUNNING_MIDDLE_TO_SIDE
        (r >= 0.5)? lk_switch: state = @LK_WAITING
        # lk_switch: state = @LK_RUNNING_MIDDLE_TO_SIDE
    }

    (@lk_state = @LK_WAITING)?                (@fcycle > @lk_startcycle + @LK_WAITING_DURATION)? {
        (r < 0.4)? lk_switch: state = @LK_RUNNING_MIDDLE_TO_SIDE
        (r >= 0.4)? lk_switch: state = @LK_RUNNING_MIDDLE_TO_MIDDLE
    }
    (@lk_state = @LK_WAITING)? {
        ([lk_combo_opposite] = true)? lk_switch: state = @LK_MOCKING
        ([lk_combo] = true)?          lk_switch: state = @LK_HAPPY
    }

    # ------------------ #
    # Actions to perform #
    # ------------------ #
    lk_update
