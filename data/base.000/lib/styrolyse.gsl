string @background
int    @lastID
int    @cycle
float  @fcycle
float  @delta_t
float  @delta_cycle = @delta_t * 25.
int    @finished

// int    @freq

int    @mode
int    INIT   = 0
int    UPDATE = 1
int    DRAW   = 2
int    EVENT  = 3

int @maxHeightPlayer
int @maxHeightAI
int @neutralsForPlayer
int @neutralsForAI
int @maxHeightLeft
int @maxHeightRight
int @neutralsForLeft
int @neutralsForRight
int @comboPhaseLeft
int @comboPhaseRight
int @gameOverLeft
int @gameOverRight

string @event_type
int  @event_player

(@mode = INIT)? {
  @finished = 0
  @cycle  = 0
  @fcycle = 0.0
  @maxHeightPlayer = 0
  @maxHeightAI = 0
  @neutralsForPlayer = 0
  @neutralsForAI = 0
  @event_type = "0123456789012345678901234567890123456789"
  @event_player = 0
  init
}

(@mode = UPDATE)? {
  update
  sprite_list
  @fcycle += @delta_cycle
  @cycle  = [f2i: value = @fcycle]
}

(@mode = DRAW)? sprite_list

struct <Vec2:
  float x,
  float y>
Vec2 @event_pos

declare <event: string type, Vec2 pos, int player>

(@mode = EVENT)? event: type=@event_type pos=@event_pos player=@event_player

struct <Sprite:
  string parent,
  Vec2   pos,
  Vec2   size,
  Vec2   dest,
  Vec2   scale,
  int    flipped,
  float  dcycle,
  string image,
  float  curframe,
  float  framespeed,
  float  nbframes,
  float  alpha,
  float  destalpha>

struct <Balloon:
  Sprite image,
  string text,
  float alpha,
  float delta_alpha,
  Vec2 text_pos,
  float text_index>

struct <Display:
  float x,
  float y,
  float width,
  float height,
  Vec2  scale>

<new_sprite: float x, float y, string image, float curframe, float framespeed, float nbframes> : Sprite
  new_sprite.parent    = "none"
  new_sprite.pos.x     = x
  new_sprite.pos.y     = y
  new_sprite.size.x    = -1.
  new_sprite.size.y    = -1.
  new_sprite.scale.x    = 1.
  new_sprite.scale.y    = 1.
  new_sprite.dest.x    = x
  new_sprite.dest.y    = y
  new_sprite.flipped   = 0
  new_sprite.dcycle    = 0.0
  new_sprite.image     = image
  new_sprite.curframe  = curframe
  new_sprite.framespeed = framespeed
  new_sprite.nbframes  = nbframes
  new_sprite.alpha     = 1.
  new_sprite.destalpha = 1.

<new_sprite_simple: float x, float y, string image> : Sprite
  new_sprite_simple = [new_sprite: x=x y=y image=image curframe=0.0 framespeed=1.0 nbframes=1.0]

<move: Sprite &this, float fcycle, float x, float y>
  (fcycle > &this.dcycle)? (&this.dcycle <= @fcycle)? {
    &this.dest.x = x
    &this.dest.y = y
    &this.dcycle = fcycle
  }

<movealpha: Sprite &this, float fcycle, float x, float y, float alpha>
  (fcycle > &this.dcycle)? (&this.dcycle <= @fcycle)? {
    &this.dest.x = x
    &this.dest.y = y
    &this.destalpha = alpha
    &this.dcycle = fcycle
  }

external <cache_picture: string path, int mode>
external <cache_sound: string path>
external <cache_music: string path>
external <draw: Sprite &this, Display display>
external <gettext: string text> : string
external <mod: int numerator, int denominator> : int
external <music: string command>
external <put_text: string text, Vec2 pos, float text_index>
external <random> : float
external <sin: float value> : float
external <sound: string file, float volume>
external <strcmp: string s1, string s2> : int
external <getBoolPreference: string name, int default> : int

<cos: float value> : float
  cos = [sin: value=value + 1.57079632679]

<fabs: float x> : float
  (x <  0.0) ? fabs = -x
  (x >= 0.0) ? fabs = x

<new_display: float x, float y, float width, float height> : Display
  new_display.x = x
  new_display.y = y
  new_display.width  = width
  new_display.height = height
  new_display.scale.x = 1.0
  new_display.scale.y = 1.0

<sprite: Sprite &this, Display display>
  float diff = &this.dcycle - @fcycle
  (@mode = UPDATE)? {
    (diff > 0.0)? {
      Vec2 speed = (&this.dest - &this.pos)
      speed.x   /= diff
      speed.y   /= diff
      &this.pos.x += speed.x * @delta_cycle
      &this.pos.y += speed.y * @delta_cycle
      &this.alpha += (&this.destalpha - &this.alpha) / diff
    }
    &this.curframe += &this.framespeed * @delta_cycle
    while &this.curframe >= &this.nbframes do &this.curframe -= &this.nbframes
  }
  (@mode = DRAW)? {
    draw::&this display=display
  }

<new_balloon: string image, float x, float y, float text_x, float text_y> : Balloon
  new_balloon.image = [new_sprite_simple: image=image x=x y=y]
  new_balloon.text  = ""
  new_balloon.alpha = 0.0
  new_balloon.delta_alpha = 0.0
  new_balloon.text_pos.x = text_x
  new_balloon.text_pos.y = text_y

<show_balloon: Balloon &this>
  &this.delta_alpha = 0.6

<hide_balloon: Balloon &this>
  &this.delta_alpha = -0.6

<set_text: Balloon &this, string text>
  &this.text = text
  &this.text_index = 0.0

<show_balloon_with_text: Balloon &this, string text>
  show_balloon::&this
  set_text::&this text=text

<balloon: Balloon &this, Display display>
  Vec2 displayPos
  (@mode = UPDATE)? {
    sprite::&this.image
    &this.alpha += &this.delta_alpha * @delta_cycle
    (&this.alpha < 0.0)? &this.alpha = 0.0
    (&this.alpha > 1.0)? &this.alpha = 1.0
    int c = [charAt: value=&this.text index=[f2i: value=&this.text_index]]
    float tspeed = 0.75
    &this.text_index += tspeed * @delta_cycle
  }
  (@mode = DRAW)? {
    (&this.alpha > 0.5)? {
      sprite::&this.image display=display
      displayPos.x = display.x
      displayPos.y = display.y
      put_text: text=&this.text pos=&this.image.pos + &this.text_pos + displayPos text_index=&this.text_index
    }
  }

<stress> : int
    (@maxHeightRight >  @maxHeightLeft)? stress = @maxHeightRight
    (@maxHeightRight <= @maxHeightLeft)? stress = @maxHeightLeft
    stress -= 4
    (stress < 0)? stress = 0
    (@gameOverRight = 1)? stress = -1
    (@gameOverLeft = 1)? stress = -2
