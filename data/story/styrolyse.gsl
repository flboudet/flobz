int    @freq
string @background
int    @lastID
int    @cycle
float  @fcycle
int    @finished

int    @mode
int    INIT   = 0
int    UPDATE = 1
int    DRAW   = 2

(@mode = INIT)? {
  @finished = 0
  @cycle  = 0
  @fcycle = 0.0
  init
}

(@mode = UPDATE)? {
  update
  sprite_list
  @cycle  += 1
  @fcycle += 1.0
}

(@mode = DRAW)? sprite_list

struct <Vec2:
  float x,
  float y>

struct <Sprite:
  Vec2   pos,
  Vec2   dest,
  float  dcycle,
  string image,
  float  curframe,
  float  framespeed,
  float  nbframes>

struct <Balloon:
  Sprite image,
  string text,
  float alpha,
  float delta_alpha,
  Vec2 text_pos,
  float text_index>

struct <Display:
  float x,
  float y,
  float width,
  float height>

<new_sprite: float x, float y, string image, float curframe, float framespeed, float nbframes> : Sprite
  new_sprite.pos.x     = x
  new_sprite.pos.y     = y
  new_sprite.dest.x    = x
  new_sprite.dest.y    = y
  new_sprite.dcycle    = 0.0
  new_sprite.image     = image
  new_sprite.curframe  = curframe
  new_sprite.framespeed = framespeed
  new_sprite.nbframes  = nbframes

<new_sprite_simple: float x, float y, string image> : Sprite
  new_sprite_simple = [new_sprite: x=x y=y image=image curframe=0.0 framespeed=1.0 nbframes=1.0]

<move: Sprite &this, float fcycle, float x, float y>
  (fcycle > &this.dcycle)? (&this.dcycle <= @fcycle)? {
    &this.dest.x = x
    &this.dest.y = y
    &this.dcycle = fcycle
  }

external <put_text: string text, Vec2 pos, float text_index>
external <draw: Sprite &this, Display display>

<new_display: float x, float y, float width, float height> : Display
  new_display.x = x
  new_display.y = y
  new_display.width  = width
  new_display.height = height

<sprite: Sprite &this, Display display>
  float diff = &this.dcycle - @fcycle
  (@mode = UPDATE)? {
    (diff >= 1.0)? {
      Vec2 speed = (&this.dest - &this.pos)
      speed.x   /= diff
      speed.y   /= diff
      &this.pos += speed
    }
    &this.curframe += &this.framespeed
    while &this.curframe >= &this.nbframes do &this.curframe -= &this.nbframes
  }
  (@mode = DRAW)? {
    draw::&this display=display
  }

<new_balloon: string image, float x, float y, float text_x, float text_y> : Balloon
  new_balloon.image = [new_sprite_simple: image=image x=x y=y]
  new_balloon.text  = ""
  new_balloon.alpha = 0.0
  new_balloon.delta_alpha = 0.0
  new_balloon.text_pos.x = text_x
  new_balloon.text_pos.y = text_y

<show_balloon: Balloon &this>
  &this.delta_alpha = 0.6

<hide_balloon: Balloon &this>
  &this.delta_alpha = -0.6

<set_text: Balloon &this, string text>
  &this.text = text
  &this.text_index = 0.0

<show_balloon_with_text: Balloon &this, string text>
  show_balloon::&this
  set_text::&this text=text

<balloon: Balloon &this, Display display>
  Vec2 displayPos
  (@mode = UPDATE)? {
    sprite::&this.image
    &this.alpha += &this.delta_alpha
    (&this.alpha < 0.0)? &this.alpha = 0.0
    (&this.alpha > 1.0)? &this.alpha = 1.0
    &this.text_index += 0.5
  }
  (@mode = DRAW)? {
    (&this.alpha > 0.5)? {
      sprite::&this.image display=display
      displayPos.x = display.x
      displayPos.y = display.y
      put_text: text=&this.text pos=&this.image.pos + &this.text_pos + displayPos text_index=&this.text_index
    }
  }
